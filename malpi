



# ----------------------------------------------------------------------#

# -------------------- CORE FUNCTIONS

_setup_install(){
  _set_font
  _rank_mirrors
  _select_disk
  _format_partitions
  _install_base
  _fstab_generate
  _set_timezone
  _set_localization
  _set_network
  _mkinitcpio_generate
  _root_passwd
  _set_bootloader
  _finish_install
}

_setup_post(){
  _set_font
  _create_new_user
  _enable_multilib
  _install_xorg
  _install_vga
  _install_desktop
  _install_display_manager
  _install_extra_pkgs
  _install_aurhelper
  _clean_orphan_packages
  _finish_post
}

# ----------------------------------------------------------------------#

# -------------------- END INSTALL SECTION

# -------------------- POST INSTALL SECTION

_create_new_user() {
  _print_title "NEW USER"
  echo
  _read_input_text "Type username:"
  read -r USERNAME
  while [[ "${USERNAME}" = "" ]]; do
    _print_title "NEW USER"
    echo
    _print_warning "You must type a username!"
    echo
    _read_input_text "Type username:"
    read -r USERNAME
  done
  USERNAME=$(echo "$USERNAME" | tr '[:upper:]' '[:lower:]')
  if [[ "$(grep "${USERNAME}" /etc/passwd)" = "" ]]; then
    echo
    _print_action "Creating" "user ${USERNAME}"
    useradd -m -g users -G wheel "${USERNAME}" & PID=$!; _progress $PID
    _print_action "Setting" "/etc/sudoers"
    sed -i '/%wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers &&
    #This config is especially helpful for those using terminal multiplexers like screen, tmux, or ratpoison, and those using sudo from scripts/cronjobs:
    {
      echo ""
      echo 'Defaults !requiretty, !tty_tickets, !umask'
      echo 'Defaults visiblepw, path_info, insults, lecture=always'
      echo 'Defaults loglinelen=0, logfile =/var/log/sudo.log, log_year, log_host, syslog=auth'
      echo 'Defaults passwd_tries=3, passwd_timeout=1'
      echo 'Defaults env_reset, always_set_home, set_home, set_logname'
      echo 'Defaults !env_editor, editor="/usr/bin/vim:/usr/bin/vi:/usr/bin/nano"'
      echo 'Defaults timestamp_timeout=15'
      echo 'Defaults passprompt="[sudo] senha para %u: "'
      echo 'Defaults lecture=never'
    } >> /etc/sudoers & PID=$!; _progress $PID
  else
    echo
    _print_info "User ${USERNAME} already exists!"
  fi
  _pause_function
  PASSWD_CHECK=0
  _print_title "USER PASSWORD"
  echo
  passwd "${USERNAME}" && PASSWD_CHECK=1;
  while [[ $PASSWD_CHECK = 0 ]]; do
    _print_title "USER PASSWORD"
    echo
    _print_warning "The password does not match!"
    echo
    passwd "${USERNAME}" && PASSWD_CHECK=1;
  done
  _pause_function
}

_enable_multilib(){
  _print_title "MULTILIB"
  ARCHI=$(uname -m)
  if [[ "$ARCHI" = "x86_64" ]]; then
    local has_multilib=""
    has_multilib=$(grep -n "\[multilib\]" /etc/pacman.conf | cut -f1 -d:)
    if [[ -z $has_multilib ]]; then
      echo
      _print_action "Enabling" "Multilib"
      echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf & PID=$!; _progress $PID
    else
      echo
      _print_action "Enabling" "Multilib"
      sed -i "${has_multilib}s/^#//" /etc/pacman.conf
      local has_multilib=$(( has_multilib + 1 ))
      sed -i "${has_multilib}s/^#//" /etc/pacman.conf & PID=$!; _progress $PID
    fi
  fi
  _print_subtitle "Update"
  pacman -Syy
  _pause_function
}

_install_xorg() {
  _print_title "DISPLAY SERVER"
  DISPLAY_SERVER_LIST=("Xorg and Wayland" "Just Wayland" "None");
  echo
  _print_info "The Xorg package group requires mesa package to work and mesa requires Wayland."
  _print_select "Select display server:${RESET}"
  select DISPLAY_SERVER in "${DISPLAY_SERVER_LIST[@]}"; do
    if _contains_element "${DISPLAY_SERVER}" "${DISPLAY_SERVER_LIST[@]}"; then
      break
    else
      _invalid_option
    fi
  done
  case $DISPLAY_SERVER in
    "Xorg and Wayland")
      _print_subtitle "Packages"
      _package_install "xorg"
      _package_install "xorg-xinit"
      _package_install "xterm"
      IS_XORG=1
      IS_WAYLAND=1
      ;;
    "Just Wayland")
      _print_subtitle "Packages"
      _package_install "mesa"
      IS_WAYLAND=1
      ;;
    "None")
      ;;
  esac
  _pause_function
}

_install_vga() {
  _print_title "VIDEO DRIVER"
  VIDEO_CARD_LIST=("Intel" "Nvidia" "Virtualbox" "None")
  echo
  _print_info "AMD will be available soon!"
  _print_select "Select ${BYELLOW}VIDEO${RESET}${BCYAN} driver:${RESET}"
  select VIDEO_CARD in "${VIDEO_CARD_LIST[@]}"; do
    if _contains_element "${VIDEO_CARD}" "${VIDEO_CARD_LIST[@]}"; then
      break
    else
      _invalid_option
    fi
  done
  if [[ "$VIDEO_CARD" = "Intel" ]]; then
    _print_subtitle "Packages"
    _package_install "xf86-video-intel libvdpau-va-gl"
  elif [[ "$VIDEO_CARD" = "AMD" ]]; then
    _print_warning "It's not working yet..."
  elif [[ "$VIDEO_CARD" = "Nvidia" ]]; then
    _package_install "nvidia-dkms nvidia-utils nvidia-settings"
  elif [[ "$VIDEO_CARD" = "Virtualbox" ]]; then
    _print_subtitle "Packages"
    _package_install "virtualbox-guest-utils virtualbox-guest-dkms libvdpau-va-gl"
  elif [[ "$VIDEO_CARD" = "None" ]]; then
    echo
    _print_info "Nothing has been changed!"
  else
    _invalid_option
    exit 0
  fi
  _pause_function
}

_install_desktop() {
  _select_desktop() {
    _print_title "DESKTOP ENVIRONMENT - WINDOW MANAGER"
    DESKTOP_LIST=("Gnome" "Plasma" "Xfce" "i3-gaps" "Bspwm" "Awesome" "Openbox" "Qtile" "Sway" "None");
    _print_select "Select desktop environment or window manager:"
    select DESKTOP in "${DESKTOP_LIST[@]}"; do
      if _contains_element "${DESKTOP}" "${DESKTOP_LIST[@]}"; then
        break
      else
        _invalid_option
      fi
    done
    case ${DESKTOP} in
      "Gnome")
        _print_title "GNOME"
        _print_subtitle "Packages"
        _package_install "gnome gnome-extra gnome-tweaks"
        ;;
      "Plasma")
        _print_title "KDE PLASMA"
        _print_subtitle "Packages"
        _package_install "plasma kde-applications packagekit-qt5"
        ;;
      "Xfce")
        _print_title "XFCE4"
        _print_subtitle "Packages"
        _package_install "xfce4 xfce4-goodies xarchiver network-manager-applet"
        ;;
      "i3-gaps")
        _print_title "I3-GAPS"
        _print_subtitle "Packages"
        _package_install "i3-gaps i3blocks i3lock i3status dmenu arandr nitrogen picom \
        lxappearance thunar xfce4-terminal xarchiver network-manager-applet"
        ;;
      "Bspwm")
        _print_title "BSPWM" 
        _print_subtitle "Packages"
        _package_install "bspwm sxhkd dmenu arandr nitrogen picom \
        lxappearance thunar xfce4-terminal xarchiver network-manager-applet"
        _print_subtitle "Configure"
        _print_action "Creating" "bspwm and sxhkd directories"
        mkdir -p /home/"${USERNAME}"/.config/{bspwm,sxhkd} &> /dev/null & PID=$!; _progress $PID
        _print_action "Coping" "bspwmrc to bspwm folder"
        cp /usr/share/doc/bspwm/examples/bspwmrc /home/"${USERNAME}"/.config/bspwm/ &> /dev/null & PID=$!; _progress $PID
        _print_action "Coping" "sxhkdrc to sxhkd folder"
        cp /usr/share/doc/bspwm/examples/sxhkdrc /home/"${USERNAME}"/.config/sxhkd/ &> /dev/null & PID=$!; _progress $PID
        _print_action "Replacing" "urxvt with xfce4-terminal in sxhkdrc"
        sed -i 's/urxvt/xfce4-terminal/' /home/"${USERNAME}"/.config/sxhkd/sxhkdrc &> /dev/null & PID=$!; _progress $PID
        ;;
      "Awesome")
        _print_title "AWESOME WM"
        _print_subtitle "Packages"
        _package_install "awesome dmenu arandr nitrogen picom \
        lxappearance thunar xfce4-terminal xarchiver network-manager-applet"
        _print_subtitle "Configure"
        _print_action "Creating" "awesome directory"
        mkdir -p /home/"${USERNAME}"/.config/awesome &> /dev/null & PID=$!; _progress $PID
        _print_action "Coping" "rc.lua to awesome folder"
        cp /etc/xdg/awesome/rc.lua /home/"${USERNAME}"/.config/awesome/ & PID=$!; _progress $PID
        _print_action "Replacing" "xterm with xfce4-terminal in rc.lua"
        sed -i '/^terminal/s/xterm/xfce4-terminal/' /home/"${USERNAME}"/.config/awesome/rc.lua &> /dev/null & PID=$!; _progress $PID
        ;;
      "Openbox")
        _print_title "OPENBOX"
        _print_subtitle "Packages"
        _package_install "openbox obconf dmenu arandr nitrogen picom \
        lxappearance thunar xfce4-terminal xarchiver network-manager-applet"
        ;;
      "Qtile")
        _print_title "QTILE"
        _print_subtitle "Packages"
        _package_install "qtile dmenu arandr nitrogen picom lxappearance \
        thunar xfce4-terminal xarchiver network-manager-applet"
        _print_action "Creating" "qtile directory"
        mkdir -p /home/"${USERNAME}"/.config/qtile &> /dev/null & PID=$!; _progress $PID
        _print_action "Coping" "config.py to qtile folder"
        cp /usr/share/doc/qtile/default_config.py /home/"${USERNAME}"/.config/qtile/config.py & PID=$!; _progress $PID
        ;;
      "Sway")
        _print_title "SWAY"
        _print_subtitle "Packages"
        _package_install "sway swayidle swaylock waybar alacritty dmenu thunar xfce4-terminal"
        _print_subtitle "Configure"
        _print_action "Creating" "sway directory"
        mkdir -p /home/"${USERNAME}"/.config/sway & PID=$!; _progress $PID
        _print_action "Coping" "config file to sway folder"
        cp /etc/sway/config /home/"${USERNAME}"/.config/sway/ & PID=$!; _progress $PID
        _print_action "Replacing" "alacritty with xfce4-terminal in sway config file"
        sed -i 's/alacritty/xfce4-terminal/g' /home/"${USERNAME}"/.config/sway/config &> /dev/null & PID=$!; _progress $PID
        ;;
      "None")
        echo
        _read_input_option "${BRED}Are you sure about that? [y/N]: ${RESET}"
        if [[ ${OPTION,,} != "y" ]]; then
          _select_desktop
        fi
        ;;
    esac
    _pause_function
  }
  _set_keyboard_layout() {
    if [[ $IS_XORG -eq 1 ]] || [[ $IS_WAYLAND -eq 1 ]]; then
      _print_title "KEYBOARD LAYOUT"
      local items=""
      items=$(localectl list-x11-keymap-layouts)
      KEYBOARD_LAYOUTS_LIST=()
      SAVEIFS=$IFS
      IFS=$'\n'
      for item in ${items}; do
        KEYBOARD_LAYOUTS_LIST+=("$item")
      done
      IFS=$SAVEIFS
      echo
      _print_info "Keyboard layout will be set to 'br' if not modified!"
      echo
      _read_input_option "Do you want to change keyboard layout now? [y/N]: "
      if [[ ${OPTION,,} == "y" ]]; then
        _print_title "KEYBOARD LAYOUT"
        _print_select "Select keyboard layout for display server(s):"
        select KEYBOARD_LAYOUT in "${KEYBOARD_LAYOUTS_LIST[@]}"; do
          if _contains_element "${KEYBOARD_LAYOUT}" "${KEYBOARD_LAYOUTS_LIST[@]}"; then
            if [[ "$KEYBOARD_LAYOUT" != "Cancel" ]]; then
              _print_title "KEYBOARD LAYOUT"
              echo
              if [[ $IS_XORG -eq 1 ]] && [[ "${DESKTOP}" != "None" ]]; then
                _print_action "Running" "localectl set-x11-keymap \"${KEYBOARD_LAYOUT}\""
                localectl set-x11-keymap "${KEYBOARD_LAYOUT}" &> /dev/null & PID=$!; _progress $PID
              fi
              if [[ $IS_WAYLAND -eq 1 ]] && [[ "${DESKTOP}" != "None" ]]; then
                if ! grep "XKB_DEFAULT_LAYOUT" < /etc/profile &> /dev/null; then
                  _print_action "Including" "XKB_DEFAULT_LAYOUT variable into /etc/profile"
                  echo -e "export XKB_DEFAULT_LAYOUT=\"${KEYBOARD_LAYOUT}\"" >> /etc/profile & PID=$!; _progress $PID
                fi 
              fi
              break
            else
              break
            fi
          else
           _invalid_option
          fi
        done
      else
        echo
        if [[ $IS_XORG -eq 1 ]] && [[ "${DESKTOP}" != "None" ]]; then
          _print_action "Running" "localectl set-x11-keymap \"br\" \"\" \"abnt2\""
          localectl set-x11-keymap "br" "" "abnt2" &> /dev/null & PID=$!; _progress $PID
        fi
        if [[ $IS_WAYLAND -eq 1 ]] && [[ "${DESKTOP}" != "None" ]]; then
          if ! grep "XKB_DEFAULT_LAYOUT" < /etc/profile &> /dev/null; then
            _print_action "Including" "XKB_DEFAULT_LAYOUT variable into /etc/profile"
            echo -e "export XKB_DEFAULT_LAYOUT=\"br\"" >> /etc/profile & PID=$!; _progress $PID
          fi         
        fi
      fi
    fi
  }
  _select_desktop
  _set_keyboard_layout
  _pause_function
}

_install_display_manager() {
  _print_title "DISPLAY MANAGER"
  DMANAGER_LIST=("Lightdm" "Ly [AUR]" "None")
  echo
  _print_info "XINIT will be available soon"
  _print_select "Select display manager:"
  select DMANAGER in "${DMANAGER_LIST[@]}"; do
    if _contains_element "${DMANAGER}" "${DMANAGER_LIST[@]}"; then
      break
    else
      _invalid_option
    fi
  done

  case $DMANAGER in
    "Lightdm")
      _print_title "LIGHTDM"
      _print_subtitle "Packages"
      _package_install "lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings"
      _print_subtitle "Services"
      _print_action "Enabling" "Lightdm"
      systemctl enable lightdm &> /dev/null & PID=$!; _progress $PID
      ;;
    "Ly [AUR]")
      _print_title "LY"
      echo
      if ! _is_package_installed "ly" ; then
        su - "${USERNAME}" -c "
          cd
          [[ -d ly ]] && rm -rf ly
          git clone https://aur.archlinux.org/ly.git ly
          cd ly
          makepkg -csi --noconfirm
          cd
          rm -rf ly
        "
        _print_subtitle "Services"
        _print_action "Enabling" "Ly"
        systemctl enable ly.service &> /dev/null & PID=$!; _progress $PID
      else
        _print_info "Ly is already installed!"
      fi
      ;;
    "Xinit") # NOT INCLUDED IN SELECT YET
      echo
      _print_warning "Nothing has been changed!"
      ;;
    "None")
      echo
      _print_info "Nothing has been changed!"
      ;;
  esac
  _pause_function
}

_install_extra_pkgs() {
  _print_title "EXTRA PACKAGES"
  UTILITIES_PKGS="mtools udisks2 usbutils lsof dmidecode neofetch bashtop htop nss-mdns logrotate sysfsutils mlocate dialog wget git reflector bash-completion xdg-utils xdg-user-dirs"
  COMPRESSION_PKGS="zip unzip unrar p7zip lzop"
  FILESYSTEM_PKGS="ntfs-3g autofs mtpfs"
  SOUND_PKGS="alsa-utils pulseaudio"
  echo
  _print_items "Utilities" "${UTILITIES_PKGS}"
  echo
  _print_items "Compression tools" "${COMPRESSION_PKGS}"
  echo
  _print_items "Filesystem tools" "${FILESYSTEM_PKGS}"
  echo
  _print_items "Sound tools" "${SOUND_PKGS}"
  echo
  _print_line
  EXTRA_PKGS_STATUS="${BRED}No${RESET}"
  _read_input_option "Install extra packages? [Y/n]: "
  if [ "${OPTION}" != "n" ] && [ "${OPTION}" != "N" ]; then
    _print_title "EXTRA PACKAGES"
    _print_subtitle "Utilities"
    _package_install "${UTILITIES_PKGS}"
    _print_subtitle "Compression tools"
    _package_install "${COMPRESSION_PKGS}"
    _print_subtitle "Filesystem tools"
    _package_install "${FILESYSTEM_PKGS}"
    _print_subtitle "Sound tools"
    _package_install "${SOUND_PKGS}"
    EXTRA_PKGS_STATUS="${BGREEN}Yes${RESET}"
    _pause_function
  fi
  _print_title "EXTRA PACKAGES"
  LAPTOP_PKGS="wireless_tools bluez bluez-utils pulseaudio-bluetooth xf86-input-synaptics"
  echo
  _print_items "Laptop packages" "${LAPTOP_PKGS}"
  echo
  _print_line
  LAPTOP_PKGS_STATUS="${BRED}No${RESET}"
  _read_input_option "Install laptop packages? [Y/n]: "
  if [ "${OPTION}" != "n" ] && [ "${OPTION}" != "N" ]; then
    _print_title "EXTRA PACKAGES"
    _print_subtitle "Packages"
    _package_install "${LAPTOP_PKGS}"
    _print_subtitle "Services"
    _print_action "Enabling" "Bluetooth"
    systemctl enable bluetooth &> /dev/null & PID=$!; _progress $PID
    LAPTOP_PKGS_STATUS="${BGREEN}Yes${RESET}"
    _pause_function
  fi
}

_install_aurhelper() {
  _print_title "YAY"
  echo
  _print_warning "The user password will be required, stay watchful!"
  echo
  AUR_HELPER_STATUS="${BRED}No${RESET}"
  _read_input_option "Install yay? [Y/n]: "
  if [ "${OPTION}" != "n" ] && [ "${OPTION}" != "N" ]; then
    if ! _is_package_installed "yay" ; then
      _print_subtitle "Packages"
      _package_install "git go"
      echo
      pacman -D --asdeps go
      su - "${USERNAME}" -c "
        [[ -d yay ]] && rm -rf yay
        git clone https://aur.archlinux.org/yay.git yay
        cd yay
        makepkg -csi --noconfirm
        cd
        rm -rf yay
      "
      if _is_package_installed "yay"; then
        AUR_HELPER_STATUS="${BGREEN}Yes${RESET}"
      else
        AUR_HELPER_STATUS="${BRED}No${RESET}"
      fi
      _pause_function
    else
      echo
      _print_info "Yay is already installed!"
      AUR_HELPER_STATUS="${BGREEN}Yes${RESET}"
      _pause_function
    fi
  fi
}

_clean_orphan_packages(){
  if pacman -Qqdt &> /dev/null; then
    _print_title "CLEAN ORPHAN PACKAGES"
    echo
    _print_action "Cleaning" "orphan packages"
    pacman -Rsc --noconfirm "$(pacman -Qqdt)" &> /dev/null & PID=$!; _progress $PID
    _pause_function
  fi
}

_finish_post() {
  chown "${USERNAME}" -R /home/"${USERNAME}" # changing the user home folder owner
  _print_title "SECOND STEP FINISHED"
  echo
  _print_info "Thank's for using the malpi script so far! The system installation is complete, enjoy!"
  echo
  _print_item "Extra packages" "${EXTRA_PKGS_STATUS}"
  _print_item "Laptop packages" "${LAPTOP_PKGS_STATUS}"
  _print_item "AUR Helper" "${AUR_HELPER_STATUS}"
  _print_item "Video driver" "${VIDEO_CARD}"
  _print_item "Desktop" "${DESKTOP}"
  _print_item "Display Manager" "${DMANAGER}"
  echo
  _print_line
  _read_input_option "${BRED}Reboot system now? [y/N]: ${RESET}"
  if [ "$OPTION" = "y" ] || [ "$OPTION" = "Y" ]; then
    clear
    setfont
    reboot
  else
    setfont
    clear
    _print_exit
    exit 0
  fi
  exit 0
}

# --- END POST INSTALL SECTION --- >

usage() {
  cat <<EOF

usage: ${0##*/} [flags]

 Flag options:

  --install | -i         First step, only root user.
  --post    | -p         Second step, only root user.

${SCRIPT_TITLE} ${SCRIPT_VERSION}

EOF
}

### EXECUTION

[[ -z $1 ]] && {
    usage
    exit 1
}

while [[ "$1" ]]; do
  case "$1" in
    "--install"|"-i") _setup_install;;
    "--post"|"-p") _setup_post;;
  esac
  shift
  setfont
  clear
  _print_exit
  exit 0
done
#!/bin/bash

# ======================================================================#
# >>>           PARÂMETROS INICIAIS
# ----------------------------------------------------------------------#


# ======================================================================#
# >>>           VARIÁVEIS
# ----------------------------------------------------------------------#

# --- COLORS
  Bold=$(tput bold)
  Underline=$(tput sgr 0 1)
  Reset=$(tput sgr0)
  # Regular Colors
  Red=$(tput setaf 1)
  Green=$(tput setaf 2)
  Yellow=$(tput setaf 3)
  Blue=$(tput setaf 4)
  Purple=$(tput setaf 5)
  Cyan=$(tput setaf 6)
  White=$(tput setaf 7)
  # Bold
  BRed=${Bold}${Red}
  BGreen=${Bold}${Green}
  BYellow=${Bold}${Yellow}
  BBlue=${Bold}${Blue}
  BPurple=${Bold}${Purple}
  BCyan=${Bold}${Cyan}
  BWhite=${Bold}${White}

# ---     ESSENTIALS
  FILESYSTEM="btrfs"
  NEW_LANGUAGE="pt_BR"
  NEW_ZONE="America"
  NEW_SUBZONE="Fortaleza"
  NEW_USER="user"
  NEW_HOSTNAME="archlinux"
  TRIM=0

# ---     MOUNTPOINTS
  EFI_PARTITION="/dev/sda1"
  EFI_MOUNTPOINT="/boot/efi"
  ROOT_PARTITION="/dev/sda3"
  ROOT_MOUNTPOINT="/mnt"
  BOOT_MOUNTPOINT="/boot"
  INSTALL_DISK="/dev/sda"

# ---     PROMPT
  prompt1="Opção: "

# ======================================================================#
# >>>           FUNÇÕES PRICIPAIS
# ----------------------------------------------------------------------#

initial() {
  print_title "PREPARANDO INSTALAÇÃO..."
    export LANG="${NEW_LANGUAGE}.UTF-8"
  pause_function
}

time_sync() {
  print_title "SINCRONIZANDO RELÓGIO COM A INTERNET..."
  timedatectl set-ntp true
  print_warning " CONCLUÍDO!"
  pause_function
}

rank_mirrors() {
  print_title "RANKEANDO ESPELHOS DE REDE..."
  #pacman -Sy --needed pacman-contrib --noconfirm
  if [[ ! -f /etc/pacman.d/mirrorlist.backup ]]; then
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
  fi
  #curl -so "/etc/pacman.d/mirrorlist.tmp" "https://www.archlinux.org/mirrorlist/?country=BR&use_mirror_status=on"
  #sed -i 's/^#Server/Server/g' "/etc/pacman.d/mirrorlist.tmp"
  #rankmirrors /etc/pacman.d/mirrorlist.tmp > /etc/pacman.d/mirrorlist
  #rm /etc/pacman.d/mirrorlist.tmp
  reflector -c Brazil --sort rate --save /etc/pacman.d/mirrorlist
  chmod +r /etc/pacman.d/mirrorlist
  nano /etc/pacman.d/mirrorlist
  pacman -Syy
  print_title "RANKEANDO ESPELHOS..."
  print_warning " CONCLUÍDO!"
  pause_function
}

select_disk() {
  print_title "PARTICIONANDO DISCOS..."
  PS3="$prompt1"
  devices_list=($(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd\|nvme\|mmcblk'))
  echo -e "Discos disponíveis:\n"
  lsblk -lnp -I 2,3,8,9,22,34,56,57,58,65,66,67,68,69,70,71,72,91,128,129,130,131,132,133,134,135,259 | awk '{print $1,$4,$6,$7}' | column -t
  echo ""
  echo -e "Selecione o disco para particionar:\n"
  select device in "${devices_list[@]}"; do
    if contains_element "${device}" "${devices_list[@]}"; then
      break
    else
      invalid_option
    fi
  done
  INSTALL_DISK=${device}
  cfdisk $INSTALL_DISK
  echo "Disco selecionado: ${INSTALL_DISK}"
  print_title "PARTICIONANDO DISCOS..."
  print_warning " CONCLUÍDO!"
  pause_function
}

format_partitions() {
  print_title "FORMATANDO E MONTANDO PARTIÇÕES..."
  block_list=($(lsblk | grep 'part\|lvm' | awk '{print substr($1,3)}'))

  partitions_list=()
  for OPT in "${block_list[@]}"; do
    partitions_list+=("/dev/$OPT")
  done

  if [[ ${#block_list[@]} -eq 0 ]]; then
    echo "Nenhuma partição encontrada."
    exit 0
  fi

  format_root_partition() {
    print_title "FORMATANDO PARTIÇÃO BTRFS..."
    PS3="$prompt1"
    echo -e "Selecione a partição para a criação dos volumes:"
    select partition in "${partitions_list[@]}"; do
      if contains_element "${partition}" "${partitions_list[@]}"; then
        partition_number=$((REPLY -1))
        ROOT_PARTITION="$partition"
        mkfs.btrfs -f -L Archlinux ${ROOT_PARTITION}
        mount ${ROOT_PARTITION} ${ROOT_MOUNTPOINT}
        btrfs su cr ${ROOT_MOUNTPOINT}/@
        btrfs su cr ${ROOT_MOUNTPOINT}/@home
        btrfs su cr ${ROOT_MOUNTPOINT}/@.snapshots
        umount ${ROOT_MOUNTPOINT}
        mount -o noatime,compress=lzo,space_cache,commit=120,subvol=@ ${ROOT_PARTITION} ${ROOT_MOUNTPOINT}
        mkdir -p ${ROOT_MOUNTPOINT}/{home,.snapshots}
        mount -o noatime,compress=lzo,space_cache,commit=120,subvol=@home ${ROOT_PARTITION} ${ROOT_MOUNTPOINT}/home
        mount -o noatime,compress=lzo,space_cache,commit=120,subvol=@.snapshots ${ROOT_PARTITION} ${ROOT_MOUNTPOINT}/.snapshots
        check_mountpoint "${ROOT_PARTITION}" "${ROOT_MOUNTPOINT}"
        print_warning " CONCLUÍDO!"
        break;
      else
        invalid_option
      fi
    done
    pause_function
  }

  format_efi_partiton() {
    print_title "FORMATANDO PARTIÇÃO EFI..."
    PS3="$prompt1"
    echo -e "Selecione a partição EFI: "
    select partition in "${partitions_list[@]}"; do
      if contains_element "${partition}" "${partitions_list[@]}"; then
        EFI_PARTITION="$partition"
        read_input_text "Formatar partição EFI? [s/N]: "
        echo ""
        if [[ $OPTION == s ]]; then
          mkfs.fat -F32 ${EFI_PARTITION}
          echo "Partição EFI formatada!"
        fi
        mkdir -p ${ROOT_MOUNTPOINT}${EFI_MOUNTPOINT}
        mount -t vfat ${EFI_PARTITION} ${ROOT_MOUNTPOINT}${EFI_MOUNTPOINT}
        check_mountpoint "${EFI_PARTITION}" "${ROOT_MOUNTPOINT}${EFI_MOUNTPOINT}"
        print_warning " CONCLUÍDO!"
        break;
      else
        invalid_option
      fi
    done
    pause_function
  }

  disable_partition() {
    unset partitions_list["${partition_number}"]
    partitions_list=("${partitions_list[@]}")
  }

  check_mountpoint() {
    if mount | grep "$2"; then
      echo "A partição foi montada com sucesso!"
      disable_partition "$1"
    else
      echo "ALERTA: A partição não foi montada com sucesso!"
    fi
  }
  format_root_partition
  format_efi_partiton
  print_title "FORMATANDO E MONTANDO PARTIÇÕES..."
  print_warning " CONCLUÍDO!"
  pause_function
}

install_base() {
  print_title "INSTALANDO BASE DO SISTEMA..."
  pacstrap ${ROOT_MOUNTPOINT} \
    base base-devel \
    linux-lts \
    linux-lts-headers \
    linux-firmware \
    nano \
    intel-ucode \
    btrfs-progs
  print_warning " CONCLUÍDO!"
  pause_function
}

install_essential_pkgs() {
  print_title "INSTALANDO PACOTES ESSENCIAIS..."
  pacstrap ${ROOT_MOUNTPOINT} \
    dosfstools \
    mtools \
    udisks2 \
    wpa_supplicant \
    wireless_tools \
    bluez \
    bluez-utils \
    dialog \
    git \
    reflector \
    bash-completion \
    wget \
    xdg-utils \
    xdg-user-dirs \
    alsa-utils \
    pulseaudio \
    pulseaudio-bluetooth \
    networkmanager
  arch-chroot ${ROOT_MOUNTPOINT} systemctl enable bluetooth NetworkManager
  print_warning " CONCLUÍDO!"
  pause_function
}

fstab_generate() {
  print_title "GERANDO FSTAB..."
  genfstab -U ${ROOT_MOUNTPOINT} >> ${ROOT_MOUNTPOINT}/etc/fstab
  print_warning " CONCLUÍDO!"
  pause_function
}

set_locale() {
  print_title "CONFIGURANDO FUSO HORÁRIO..."
  arch-chroot ${ROOT_MOUNTPOINT} timedatectl set-ntp true
  arch-chroot ${ROOT_MOUNTPOINT} ln -sf /usr/share/zoneinfo/${NEW_ZONE}/${NEW_SUBZONE} /etc/localtime
  arch-chroot ${ROOT_MOUNTPOINT} sed -i '/#NTP=/d' /etc/systemd/timesyncd.conf
  arch-chroot ${ROOT_MOUNTPOINT} sed -i 's/#Fallback//' /etc/systemd/timesyncd.conf
  arch-chroot ${ROOT_MOUNTPOINT} echo \"FallbackNTP=a.st1.ntp.br b.st1.ntp.br 0.br.pool.ntp.org\" >> /etc/systemd/timesyncd.conf
  arch-chroot ${ROOT_MOUNTPOINT} systemctl enable systemd-timesyncd.service
  arch-chroot ${ROOT_MOUNTPOINT} hwclock --systohc --utc
  sed -i 's/#\('pt_BR.UTF-8'\)/\1/' ${ROOT_MOUNTPOINT}/etc/locale.gen
  arch-chroot ${ROOT_MOUNTPOINT} locale-gen
  print_warning " CONCLUÍDO!"
  pause_function
}

set_language() {
  print_title "CONFIGURANDO IDIOMA E TECLADO..."
  echo -e "LANG=pt_BR.UTF-8\nLANGUAGE=pt_BR.UTF-8\nLC_TIME=pt_BR.UTF-8\nLC_ALL=pt_BR.UTF-8\nLC_MESSAGES=pt_BR.UTF-8" > ${ROOT_MOUNTPOINT}/etc/locale.conf
  echo "KEYMAP=br-abnt2" >> ${ROOT_MOUNTPOINT}/etc/vconsole.conf
  print_warning " CONCLUÍDO!"
  pause_function  
}

set_hostname() {
  print_title "DEFININDO NOME DA MÁQUINA E CONFIGURANDO IP'S..."
  printf "%s" "Hostname [ex: archlinux]: " 
  read -r NEW_HOSTNAME
  echo ${NEW_HOSTNAME} > ${ROOT_MOUNTPOINT}/etc/hostname
  echo -e "127.0.0.1 localhost.localdomain localhost\n::1 localhost.localdomain localhost\n127.0.1.1 ${NEW_HOSTNAME}.localdomain ${NEW_HOSTNAME}" > ${ROOT_MOUNTPOINT}/etc/hosts
  print_warning " CONCLUÍDO!"
  pause_function  
}

root_passwd() {
  print_title "CONFIGURANDO SENHA DE ROOT..."
  arch-chroot ${ROOT_MOUNTPOINT} passwd
  print_warning " CONCLUÍDO!"
  pause_function
}

grub_generate() {
  print_title "INSTALANDO E CONFIGURANDO O GRUB..."
  pacstrap ${ROOT_MOUNTPOINT} grub grub-btrfs efibootmgr os-prober
  arch-chroot ${ROOT_MOUNTPOINT} grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchLinux --recheck
  arch-chroot ${ROOT_MOUNTPOINT} grub-mkconfig -o /boot/grub/grub.cfg
  print_warning " CONCLUÍDO!"
  pause_function  
}

#mkinitcpio_generate() {
#  print_title "GERANDO MKINITCPIO..."
#  arch-chroot ${ROOT_MOUNTPOINT} mkinitcpio -P
#  print_warning " CONCLUÍDO!"
#  pause_function  
#}

finish() {
  print_title "INSTALAÇÃO COMPLETA!"
  print_warning " Copiando arquivos..."
  print_warning " CONCLUÍDO!"
  cp /etc/pacman.d/mirrorlist.backup ${ROOT_MOUNTPOINT}/etc/pacman.d/mirrorlist.backup
  cp -r /root/myarch/ ${ROOT_MOUNTPOINT}/root/myarch
  read_input_text "Reiniciar o sistema? [s/N]: "
  if [[ $OPTION == s ]]; then
    umount_partitions
    reboot
  fi
  exit 0
}

# ======================================================================#
# >>>           OUTRAS FUNÇÕES
# ----------------------------------------------------------------------#

print_line() {
  printf "%$(tput cols)s\n"|tr ' ' '-'
}

print_title() {
  clear
  print_line
  echo -e "${BPurple}# $1${Reset}"
  print_line
  echo ""
}

print_warning() { #{{{
  T_COLS=$(tput cols)
  echo -e "\n${BGreen}$1${Reset}\n" | fold -sw $(( T_COLS - 1 ))
}

pause_function() { #{{{
  print_line
  read -e -sn 1 -p "Pressione qualquer tecla para continuar..."
}

contains_element() {
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && break; done;
}

invalid_option() {
    print_line
    echo "Opção inválida. Tente novamente..."
    pause_function
}

read_input_text() {
  printf "%s" "${BRed}$1${Reset}"
  read -r OPTION
}

umount_partitions() {
  print_warning "DESMONTANDO AS PARTIÇÕES..."
  #mounted_partitions=($(lsblk | grep "${ROOT_MOUNTPOINT}" | awk '{print $7}' | sort -r))
  #swapoff -a
  #for i in "${mounted_partitions[@]}"; do
  #  umount "$i"
  #done
  umount -R ${ROOT_MOUNTPOINT}
}

# ======================================================================#
# >>>           INSTALAÇÃO
# ----------------------------------------------------------------------#

initial
time_sync
select_disk
format_partitions
rank_mirrors
install_base
install_essential_pkgs
fstab_generate
set_locale
set_language
set_hostname
root_passwd
grub_generate
mkinitcpio_generate
finish
